require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe MemesController do

  MEME1 = { "meme_type" => "Y_U_NO", "first_line" => "write tests?" }

  describe "POST create" do
    it "creates a new meme" do
      Meme.should_receive(:new).with(MEME1)
      post :create, :meme => MEME1
    end
  end


  def mock_meme(stubs={})
    @mock_meme ||= mock_model(Meme, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all memes as @memes" do
      Meme.stub(:all) { [mock_meme] }
      get :index
      assigns(:memes).should eq([mock_meme])
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created meme as @meme" do
        Meme.stub(:new).with({'these' => 'params'}) { mock_meme(:save => true) }
        post :create, :meme => {'these' => 'params'}
        assigns(:meme).should be(mock_meme)
      end

      it "redirects to the created meme" do
        Meme.stub(:new) { mock_meme(:save => true) }
        post :create, :meme => {}
        response.should redirect_to(meme_url(mock_meme))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved meme as @meme" do
        Meme.stub(:new).with({'these' => 'params'}) { mock_meme(:save => false) }
        post :create, :meme => {'these' => 'params'}
        assigns(:meme).should be(mock_meme)
      end

      it "re-renders the 'new' template" do
        Meme.stub(:new) { mock_meme(:save => false) }
        post :create, :meme => {}
        response.should render_template("new")
      end
    end
  end

end
